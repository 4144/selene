# Configuration file to make YouCompleteMe (http://valloric.github.io/YouCompleteMe/)
# for Vim behave for development on the `selene` library. Use at your own risk.
# Modeled after https://github.com/Valloric/ycmd/blob/master/cpp/ycm/.ycm_extra_conf.py.

import os
import ycm_core


HEADER_EXTENSIONS = ['.h', '.hpp']
SOURCE_EXTENSIONS = ['.c', '.cpp']
BUILD_DIRECTORY = "build"  # Change if build happens in another directory

# These are the compilation flags that will be used in case there is no compilation database set
default_flags = [
    '-x', 'c++',
    '-std=c++14',
    '-Wall', '-Wextra', '-Werror',
    '-fexceptions',
    '-I', '/usr/include',
    '-I', '/usr/local/include',
    '-I', os.path.expanduser('~') + '/homebrew/include/',
    '-I', os.path.expanduser('~') + '/homebrew/opt/jpeg-turbo/include',
    '-I', './src',
    '-I', './external/Catch2/single_include',
    '-D', 'SELENE_WITH_LIBJPEG',
    '-D', 'SELENE_WITH_LIBPNG',
    '-D', 'SELENE_WITH_OPENCV',
]


def directory_of_this_script():
    return os.path.dirname(os.path.abspath(__file__))


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for more
# details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
compilation_database_folder = os.path.join(directory_of_this_script(), BUILD_DIRECTORY)
compilation_database_path = os.path.join(compilation_database_folder, "compile_commands.json")

if os.path.exists(compilation_database_path):
    database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
    database = None


def make_flags_paths_absolute(flags, working_directory):
    if not working_directory:
        return list(flags)

    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        new_flags.append(new_flag)
    return new_flags


def is_header_file(filename):
    extension = os.path.splitext(filename)[1]
    return extension in HEADER_EXTENSIONS


def get_compilation_info_for_file(filename):
    # The compilation_commands.json file generated by CMake does not have
    # entries for header files. So we do our best by asking the db for flags
    # for a corresponding source file, if any. If one exists, the flags for
    # that file should be good enough.
    if is_header_file(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(replacement_file)
                return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


def FlagsForFile(filename, **kwargs):
    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return
        # a python list, but a "list-like" StringVec object
        compilation_info = get_compilation_info_for_file(filename)
        if compilation_info:
            flags = make_flags_paths_absolute(compilation_info.compiler_flags_,
                                              compilation_info.compiler_working_dir_)
            return {'flags': flags}

    relative_to = directory_of_this_script()
    flags = make_flags_paths_absolute(default_flags, relative_to)
    return {'flags': flags}
